### **訂單 23: 鮮蝦沙拉 `[蝦沙拉]` (難度: ★★☆☆☆)**
- **最終出餐盤**: `[田園沙拉] + [水煮蝦] → [鮮蝦沙拉]`
- **解法路徑**:
    1.  **烹飪站**:
        - `鮮蝦 [蝦]` → `(煮)` → `水煮蝦 [蝦=]`
    2.  **組裝站 (半成品)**:
        - `生菜 [菜]` + `番茄 [茄]` → `田園沙拉 [沙拉]`
    3.  **組裝站 (最終成品)**:
        - `田園沙拉 [沙拉]` + `水煮蝦 [蝦=]` → `鮮蝦沙拉 [蝦沙拉]`

---

## 7. 系統實現細節：解謎式出餐機制 v2.0

為了深化遊戲的合作與策略性，v2.0版本引入了「伺服器權威」的解謎式出餐機制，取代了原有的客戶端計時與簡單的出餐模式。

### 7.1 核心架構：伺服器權威模型 (Server-Authoritative Model)

所有關鍵的遊戲邏輯，特別是時間相關的計算（如烹飪）和狀態的變更（如組合驗證），都完全由後端伺服器處理。前端（玩家的瀏覽器）只負責發送玩家的「意圖」（我想做什麼）並根據伺服器廣播的「真相」（遊戲當前的狀態）來渲染畫面。

-   **優點**:
    -   **杜絕作弊**: 玩家無法在本地修改程式碼來跳過等待時間或非法修改物品。
    -   **狀態同步**: 所有玩家看到的遊戲進程（如誰在烹飪、出餐盤的狀態）都是完全一致的，極大化提升了協作體驗。
    -   **資料可靠**: 即使玩家中途斷線重連，他們的進度也會被保留在伺服器上，可以無縫接續。

### 7.2 遊戲狀態 (`gameState`) 的關鍵變革

後端儲存的 `gameState` 物件中，加入了 `assembly_puzzle` 來取代原有的 `shared_workspace`。

-   **`assembly_puzzle` 物件結構**:
    ```json
    {
      "target_recipe_id": "burger_deluxe", // 當前訂單的最終目標
      "required_items": [ // 描述出餐盤上的所有空格
        { "type": "burger_cheese", "filled": null },
        { "type": "bread_toasted", "filled": { "id": "...", "type": "bread_toasted" } }
      ],
      "status": "incomplete" // 狀態: 'incomplete', 'ready_to_serve'
    }
    ```
    -   `target_recipe_id`: 當前訂單的ID。
    -   `required_items`: 一個陣列，定義了完成目標需要的所有材料。每個物件代表一個空格，`type` 是所需材料，`filled` 則存放玩家實際放置的物品。
    -   `status`: 謎題的當前狀態。只有在 `ready_to_serve` 時，前端的出餐按鈕才能被點擊。

### 7.3 全新的 WebSocket 訊息流程

為了支援新機制，我們定義了全新的玩家動作與伺服器廣播訊息。

1.  **開始烹飪 (伺服器權威計時)**
    -   `前端 -> 後端`: `{ "type": "start_cooking", "data": { "slotIndex": 2 } }`
    -   `後端`: 收到請求，驗證後在伺服器上開始為該物品計時。
    -   `後端 -> 前端 (廣播)`: `{ "type": "cooking_progress", "data": { "playerId": "...", "slotIndex": 2, "progress": 68 } }`
    -   `前端`: 收到進度後，在對應的物品上渲染進度條。

2.  **放置物品到出餐盤**
    -   `前端 -> 後端`: `{ "type": "place_on_assembly_plate", "data": { "fromSlot": 0, "plateSlotIndex": 1 } }`
    -   `後端`: 驗證玩家手上的物品是否符合 `assembly_puzzle` 中對應空格的要求。
    -   `後端 -> 前端 (廣播)`: `{ "type": "assembly_puzzle_update", "puzzle": { ... } }` (廣播更新後的整個謎題狀態)
    -   `前端`: 收到後，重新繪製中央的出餐盤畫面。

3.  **提交最終料理**
    -   `前端 -> 後端`: `{ "type": "serve_final_dish", "data": {} }`
    -   `後端`: 驗證 `assembly_puzzle` 狀態是否為 `ready_to_serve`，完成訂單，計算分數，並生成下一個訂單與對應的新謎題。
    -   `後端 -> 前端 (廣播)`:
        - `{ "type": "order_completed", ... }`
        - `{ "type": "new_order", ... }`
        - `{ "type": "assembly_puzzle_update", ... }` (廣播全新的謎題)

---

## 8. 未來擴展方向
- **飲料系統**: 新增「飲料機」工作站，可製作咖啡、汽水、奶昔。
- **湯品系統**: 使用「煮」動作，結合多種蔬菜與高湯塊製作濃湯。
- **烘焙系統**: 擴展「烤」動作，加入麵糰發酵等步驟，製作披薩、蛋糕等更複雜的品項。
- **地區特色料理**: 加入亞洲炒飯、墨西哥捲餅等需要特殊步驟的料理。 