# 料理急先鋒 - 項目執行說明

## 項目安裝與執行

### 1. 系統需求
- Node.js 14.0 或以上
- PostgreSQL 12.0 或以上
- 支援現代化瀏覽器 (Chrome, Firefox, Safari, Edge)

### 2. 系統架構說明

此專案已整合成一個單一的Node.js應用程式，由 `server.js` 作為主入口點。它同時管理主網站和「料理急先鋒」遊戲的後端服務。

- **主伺服器 (`server.js`)**:
  - 統一處理所有HTTP請求和WebSocket連接。
  - 監聽單一端口 (例如 3000)。

- **整合的服務**:
  - **主網站API**: 處理會員、文章等核心功能。
  - **遊戲API (`/cook-api`)**: 由 `cook-kitchen-rush.js` 模組提供，處理所有遊戲相關的HTTP請求。
  - **WebSocket服務**:
    - `/ws`: 主網站的WebSocket連接。
    - `/cook-ws`: 料理急先鋒遊戲的專用WebSocket連接。
  - 兩個WebSocket路徑由同一個WebSocket伺服器實例根據連接路徑進行路由。



### 3. 安裝步驟
 

```
# 共用資料庫配置
DB_USER=postgres
DB_HOST=localhost
DB_NAME=sunnyyummy_db
DB_PASSWORD=your_password
DB_PORT=5432

# 主系統配置
PORT=3000
JWT_SECRET=your_main_jwt_secret

# 料理急先鋒配置 (不再需要單獨的資料庫配置，將使用主資料庫)
 
COOK_JWT_SECRET=your_cook_game_jwt_secret
```

### 5. 資料庫設定

```bash
# 建立/更新主網站資料庫並應用所有 schema
psql -U postgres
CREATE DATABASE sunnyyummy_db; # 如果已存在會跳過
\c sunnyyummy_db; # 連接到資料庫
\i db_schema_main.sql # 應用主網站 schema
\i db_schema.sql # 應用料理急先鋒 schema
\q
```

### 6. 啟動服務

由於系統已整合，只需一個命令即可啟動所有服務。

 
```

### 7. 訪問應用
- 主網站：http://localhost:3000
- 料理急先鋒遊戲：http://localhost:3000/cook-login.html

注意：所有靜態文件、API和WebSocket連接現在都由同一個伺服器和端口提供。客戶端將自動連接到正確的API和WebSocket路徑 (例如 `/cook-api` 和 `/cook-ws`)。

## 項目結構

```
sunnyyummy-app/
├── server.js               # 主網站服務器
├── cook-kitchen-rush.js    # 料理急先鋒遊戲服務器
├── public/                 # 靜態文件
│   ├── index.html          # 主網站首頁
│   ├── cook-login.html     # 遊戲登入頁面
│   ├── cook-lobby.html     # 遊戲大廳
│   ├── cook-game-room.html # 遊戲房間
│   ├── cook-game.html      # 遊戲主頁面
│   ├── cook-result.html    # 遊戲結果頁面
│   ├── cook-help.html      # 遊戲說明頁面
├── package.json            # 項目配置
├── .env                    # 環境變數
└── README.md               # 項目文檔
```

## 主要功能

1. **多人協作遊戲**: 四人合作完成料理訂單
2. **BBS風格界面**: 復古文字界面，適配移動設備
3. **會員系統**: 成就、等級、排行榜系統
4. **房間系統**: 創建、加入、管理遊戲房間
5. **實時通訊**: 使用WebSocket進行遊戲數據同步和聊天
6. **AI關卡生成**: 使用Google AI API生成無限關卡

## 技術棧

- **前端**: HTML5, CSS3, JavaScript
- **後端**: Node.js, Express
- **資料庫**: PostgreSQL
- **通訊**: WebSocket (ws)
- **認證**: JWT
- **AI整合**: Google AI API

---

多人協作料理遊戲「料理急先鋒」- BBS風格會員制文字遊戲

# 1. 遊戲概述
四名玩家組成一條料理生產線，透過純文字/ASCII圖形界面進行協作料理。遊戲採用復古BBS風格，使用文字符號和簡單色彩呈現遊戲元素，帶給玩家懷舊體驗。此遊戲為會員專屬遊戲，需登入會員帳號才能進入遊戲房間和進行遊戲。**遊戲主要針對直式手機螢幕設計，提供最佳行動裝置體驗。**

# 2. 系統架構與資料表設計

## 2.1 資料表設計
- **box_users / cook_players**: 會員資訊與遊戲相關數據。核心會員資料（如帳號、密碼）儲存於主系統的 `box_users` 表。遊戲相關的延伸資料（如等級 `level`、點數 `points`、成就 `achievements`）則儲存在 `cook_players` 表，並透過 `user_id` 與主表關聯。
- **cook_roles**: 會員角色與權限
  - role_id, role_name, role_description, permission_level  
- **cook_recipes**: 遊戲內可製作的料理配方。**注意：目前版本中，料理配方邏輯（如漢堡組合）是直接在後端程式碼中實現 (hardcoded)，此資料表為未來擴展所設計。**
  - recipe_id, recipe_name, recipe_description, difficulty, ingredients_json
- **cook_ingredients**: 遊戲內可用的食材。**注意：同上，食材屬性目前在後端程式碼中定義。**
  - ingredient_id, ingredient_name, ingredient_type, ascii_symbol
- **cook_achievements**: 會員可解鎖的成就
  - achievement_id, achievement_name, description, condition_json
- **cook_user_achievements**: 會員已獲得的成就關聯表
  - user_id, achievement_id, unlock_date, display_status
- **cook_game_rooms**: 遊戲對局記錄。此表取代了原有的 `cook_game_sessions` 和 `cook_session_players`。它不僅記錄房間基本資訊，還透過一個 `game_state` (JSONB) 欄位儲存了遊戲進行中的所有動態資料，包括玩家列表、庫存、訂單、分數等。
  - room_id, room_name, status, creator_id, game_state
- **cook_user_devices**: 使用者裝置資訊
  - user_id, device_type, screen_size, last_login_device

## 2.2 會員認證機制
- **使用JWT令牌**: 與主系統共用登入憑證，確保遊戲安全性
- **權限等級控制**: 區分普通會員、高級會員權限與遊戲功能
- **會員資料同步**: 使用會員頭像、名稱於遊戲角色
- **遊戲成就整合**: 遊戲成就與網站徽章系統連接
- **指紋/臉部辨識**: 支援行動裝置生物辨識快速登入

## 2.3 會員專屬功能
- **積分系統**: 遊戲表現轉換為會員積分
- **排行榜**: 會員遊戲表現排名與獎勵
- **專屬道具**: 會員等級對應解鎖特殊道具
- **特殊頭銜**: 遊戲達成特定成就可獲得專屬頭銜

## 2.4 網頁路由結構
- **/cook-login**: 遊戲登入頁面（行動最佳化）
- **/cook-lobby**: 遊戲大廳與房間列表（行動最佳化）
- **/cook-game**: 主要遊戲界面（行動最佳化）
- **/cook-profile**: 玩家檔案與成就頁面（行動最佳化）
- **/cook-leaderboard**: 排行榜頁面（行動最佳化）
- **/cook-tutorial**: 遊戲教學頁面（行動最佳化）
- **/cook-admin**: 管理員後台（僅桌面版最佳化）

## 2.5 登入與驗證流程 - 手機版
```
+-------------------------------------+
|        料理急先鋒 - 會員登入        |
+-------------------------------------+
|                                     |
|           [頭像登入按鈕]            |
|                                     |
| 帳號: [_________________]           |
|                                     |
| 密碼: [*****************]           |
|                                     |
|           [一鍵登入]                |
|                                     |
| [忘記密碼?]        [加入會員]       |
|                                     |
+-------------------------------------+
```

# 3. 直式手機畫面設計與動畫效果

## 3.1 手機優化界面
- **垂直佈局**: 所有元素垂直排列，減少水平捲動
- **單手操作**: 關鍵按鈕置於螢幕下半部，便於拇指觸達
- **自動適配**: 依據不同手機螢幕大小自動調整佈局
- **觸控優化**: 按鈕尺寸至少48x48像素，確保易於點擊
- **保留BBS美學**: 維持文字符號構成的復古風格，但轉換為可點擊元素

```
+--------------------------+
|      料理急先鋒 v1.0     |
| @玩家名稱  [VIP]  [設定] |
+--------------------------+
|       訂單列表          |
| 漢堡 (2:35) [██░░░]     |
| 薯條 (1:20) [███░░]     |
| 可樂 (0:45) [████░]     |
+--------------------------+
|      工作站狀態         |
|                         |
| [_][_][_][_]            |
| [香][菇][肉][_]         |
|                         |
+--------------------------+
|      目前操作           |
| 你正在切洋蔥...         |
| [====>      ] 42%       |
+--------------------------+
|      玩家狀態           |
| P1: 你 - 切菜中         |
| P2: @廚師B - 等待食材   |
| P3: @廚師C - 烹飪中     |
| P4: @廚師D - 裝盤中     |
+--------------------------+
|       操作按鈕          |
|  [切]  [拿]  [放]  [送] |
+--------------------------+
|       聊天快捷鍵        |
|[需要幫忙!][傳給我][收到]|
+--------------------------+
```

## 3.2 觸控操作設計
- **大尺寸按鈕**: 主要操作按鈕寬大清晰
- **滑動手勢**: 支援左右滑動切換區域，上下滑動查看更多內容
- **長按功能**: 長按食材顯示詳細資訊
- **雙指縮放**: 可放大特定區域查看詳情
- **點擊式命令**: 將傳統BBS文字命令轉換為可點擊按鈕，無須鍵盤輸入
- **快捷指令面板**: 常用文字指令以按鈕形式呈現，支援自定義排序

## 3.3 手機版色彩編碼
- **高對比度**: 確保在強光下可讀性
- **暗色模式**: 適應夜間使用降低眼睛疲勞
- **重點突顯**: 重要元素使用鮮明色彩標示
- **食材狀態**: 不同色彩代表不同處理階段，附加圖示增強辨識度

## 3.4 手機最佳化ASCII食材表示
```
生肉: [肉]  切好的肉: [≡]  烤熟的肉: [≣]
蔬菜: [菜]  切好的菜: [≈]  煮熟的菜: [≋]
麵包: [包]  烤好的包: [≢]
漢堡: [≣≋≢]
```

## 3.5 動畫系統設計（針對手機）

### 3.5.1 手機優化文字動畫
- **省電設計**: 根據電量自動調整動畫複雜度
- **滑順漸變**: 使用CSS transitions確保動畫流暢
- **硬體加速**: 對關鍵動畫使用transform提升效能
- **動畫開關**: 允許使用者調整或關閉動畫以節省電力

```javascript
// 省電模式檢測與動畫調整
function cook_checkBatteryAndAdjustAnimation() {
  if ('getBattery' in navigator) {
    navigator.getBattery().then(battery => {
      const batteryLevel = battery.level * 100;
      // 低電量時降低動畫頻率
      if (batteryLevel < 15) {
        cook_animationConfig.frameRate = 'low';
        cook_animationConfig.effects = 'minimal';
      }
    });
  }
}
```

### 3.5.2 觸控反饋動畫
- **輕觸反饋**: 輕微縮放效果確認點擊
- **震動反饋**: 使用Navigator.vibrate API提供觸感
- **聲音反饋**: 短促聲效增強互動體驗（可關閉）

```javascript
// 觸控反饋函數
function cook_touchFeedback(element, options = {}) {
  // 視覺反饋
  element.classList.add('cook-touch-active');
  setTimeout(() => element.classList.remove('cook-touch-active'), 150);
  
  // 震動反饋 (如果支援)
  if (navigator.vibrate && options.vibrate !== false) {
    navigator.vibrate(options.vibrateDuration || 20);
  }
  
  // 聲音反饋
  if (options.sound && !cook_settings.soundMuted) {
    const sound = new Audio(options.sound);
    sound.volume = cook_settings.soundVolume;
    sound.play().catch(err => console.log('無法播放音效'));
  }
}
```

### 3.5.3 手機版進度條動畫
- **省電進度條**: 使用CSS實現而非JavaScript動畫
- **垂直進度條**: 適合手機直式佈局的垂直進度顯示

```css
/* 垂直進度條樣式 */
.cook-progress-vertical {
  height: 120px;
  width: 24px;
  background-color: #e0e0e0;
  border-radius: 12px;
  margin: 10px auto;
  position: relative;
  overflow: hidden;
}

.cook-progress-vertical-fill {
  position: absolute;
  bottom: 0;
  width: 100%;
  background: linear-gradient(to top, #4CAF50, #8BC34A);
  border-radius: 0 0 12px 12px;
  transition: height 0.3s ease-out;
}
```

```javascript
// 更新垂直進度條
function cook_updateVerticalProgress(element, progress) {
  const fillElement = element.querySelector('.cook-progress-vertical-fill');
  if (fillElement) {
    fillElement.style.height = `${progress}%`;
    
    // 更新顏色
    if (progress < 30) {
      fillElement.style.background = 'linear-gradient(to top, #F44336, #FF9800)';
    } else if (progress < 70) {
      fillElement.style.background = 'linear-gradient(to top, #FF9800, #FFEB3B)';
    } else {
      fillElement.style.background = 'linear-gradient(to top, #4CAF50, #8BC34A)';
    }
  }
}
```

## 3.6 手機特有的互動機制
- **搖一搖功能**: 搖動手機混合食材或加速烹飪
- **傾斜控制**: 傾斜手機控制食材移動方向
- **語音指令**: 支援簡單語音命令操控遊戲
- **條碼掃描**: 掃描實體物品獲得遊戲內特殊食材

```javascript
// 搖一搖檢測
function cook_initShakeDetection(sensitivity = 15) {
  let lastX = 0, lastY = 0, lastZ = 0;
  let moveCounter = 0;
  
  window.addEventListener('devicemotion', (event) => {
    const acceleration = event.accelerationIncludingGravity;
    
    const deltaX = Math.abs(acceleration.x - lastX);
    const deltaY = Math.abs(acceleration.y - lastY);
    const deltaZ = Math.abs(acceleration.z - lastZ);
    
    if (deltaX > sensitivity || deltaY > sensitivity || deltaZ > sensitivity) {
      moveCounter++;
      
      if (moveCounter > 3) {
        // 觸發搖一搖事件
        const shakeEvent = new CustomEvent('cook-shake');
        document.dispatchEvent(shakeEvent);
        moveCounter = 0;
      }
    }
    
    lastX = acceleration.x;
    lastY = acceleration.y;
    lastZ = acceleration.z;
  });
}
```

# 4. 核心功能表（手機優化）

## 4.1 玩家系統
- **快速配對**: 單點登入後即可進入遊戲
- **角色切換**: 左右滑動快速切換使用角色
- **簡易升級**: 觸控式技能升級界面
- **離線成就**: 支援離線解鎖成就，下次連線同步

## 4.2 遊戲模式
- **快速模式**: 5-10分鐘內完成的短時遊戲
- **通勤模式**: 支援低網速環境，適合移動中遊玩
- **單手模式**: 所有操作可用單手完成
- **挑戰模式**: 限時特殊規則，高級會員專屬

## 4.3 工作站設計（直式手機優化）
```
前處理站:  
  _____
 |_切___|
   

烹飪站:
  _____
 |_火___|


組裝站:
 [=====]
 |_____|


裝盤站:
 (::::)
 |_____|
```

## 4.4 手機版料理系統
- **簡化配方**: 針對手機使用精簡配方步驟
- **視覺提示**: 配合文字使用簡單圖示增強可讀性
- **觸控組合**: 拖放式食材組合操作
- **快速切換**: 左右滑動切換不同食譜

## 4.5 手機版互動機制
```
傳送系統 (垂直設計):

   [上傳]
      ↑
[玩家工作台]
      ↓
   [下傳]
```

## 4.6 BBS風格與觸控操作結合
- **操作模式轉換**: 保留文字符號與ASCII圖形，但改用點擊方式操作
- **文字按鈕設計**: [切] [拿] [放] [送] 等文字符號設計為可觸控按鈕
- **聊天對話優先**: 玩家間溝通以聊天對話為主，支援快捷短語與表情
- **輸入方式優化**: 避免大量手動輸入，使用預設短語與快捷回覆
- **BBS感官保留**: 雖採用觸控操作，但保留打字機效果、ASCII圖形等復古元素
- **指令回饋**: 點擊按鈕後顯示模擬文字指令輸入效果，增強BBS體驗

遊戲操作示例:

1. 傳統BBS方式 (參考，不再使用):
> cut onion
系統: 你正在切洋蔥... [====>      ] 42%

2. 手機優化方式 (實際採用):
[玩家點擊 [切] 按鈕，再點擊 [洋] 食材圖示]
系統: 你正在切洋蔥... [====>      ] 42%

3. 聊天溝通方式:
[玩家點擊 [需要番茄] 快捷短語]
@你: 需要番茄!
@廚師B: 收到，正在處理!
```

## 4.7 聊天系統強化
- **預設短語面板**: 根據當前遊戲狀態顯示情境相關短語
- **語音轉文字**: 支援語音輸入轉換為遊戲內文字
- **跨語言溝通**: 自動翻譯不同語言的玩家訊息
- **表情符號整合**: BBS風格的ASCII表情符號快捷選擇
- **指令聊天融合**: 可在聊天中使用特殊指令觸發遊戲操作
- **AI聊天助手**: 提供智能回應建議，協助新手溝通

# 5. 技術實現 (手機優化)

## 5.1 行動裝置技術
- **Progressive Web App**: 可安裝到主螢幕，接近原生App體驗
- **Service Workers**: 優化離線體驗與網路請求管理
- **裝置API整合**: 使用震動、方向感測等手機特有功能
- **觸控事件優化**: 使用 Pointer Events 優化多點觸控

## 5.2 手機網路優化
- **輕量級協議**: 減少通訊量以節省行動數據
- **增量更新**: 僅傳輸變動部分以降低數據用量
- **連線恢復**: 自動重連機制處理網路不穩定情況
- **數據壓縮**: 壓縮傳輸資料減少頻寬需求

## 5.3 WebSocket手機優化
- **心跳機制**: 保持連接但減少數據傳輸
- **自動重連**: 網絡波動時智能恢復連接
- **低頻模式**: 弱網絡環境下降低同步頻率
- **離線緩存**: 暫存最後狀態以便重連恢復

## 5.4 觸控操作介面
- **自定義虛擬按鍵**: 可調整位置的虛擬操作鍵
- **手勢命令**: 自定義滑動手勢執行常用操作
- **懸浮按鈕**: 始終可見的主要功能浮動按鈕
- **區域觸控**: 螢幕分區對應不同操作功能

## 5.5 會員數據同步優化
- **後台同步**: 遊戲數據在背景無感同步
- **智能緩存**: 預載可能需要的資源降低等待時間
- **增量備份**: 定期備份遊戲進度，不影響遊戲體驗
- **跨裝置同步**: 手機和電腦間無縫切換遊戲

## 5.6 行動裝置容錯設計
- **低電量模式**: 檢測低電量自動簡化特效
- **弱網絡適應**: 自動調整數據傳輸頻率
- **操作防抖**: 避免多次觸控誤觸發重複操作
- **斷點續玩**: 支援中斷後從上次進度繼續

## 5.7 手機渲染優化
- **漸進式載入**: 優先顯示關鍵界面元素
- **資源預加載**: 預測並預加載可能需要的資源
- **GPU加速**: 使用硬體加速提升動畫流暢度
- **非核心延遲載入**: 次要資源延遲載入節省啟動時間

## 5.8 安全與隱私 (手機特別考量)
- **安全存儲**: 使用手機安全存儲區存放敏感資訊
- **生物識別**: 支援指紋/Face ID增強登入安全性
- **防截屏**: 敏感資訊頁面防止截屏功能
- **自動登出**: 閒置過久自動登出保護帳號安全

## 5.9 未來效能優化規劃
- **負載監控**: 持續監控系統效能與用戶增長趨勢
- **分階段優化**: 根據用戶量增長制定分階段的優化計劃
- **擴展策略**: 當用戶量達到預設閾值時實施伺服器擴展方案
- **技術評估**: 當出現效能瓶頸時，評估新技術導入(如WebAssembly)的可行性與投入產出比
- **資源分配**: 優先保證核心遊戲體驗穩定，再進行進階效能優化

## 5.10 API版本管理
- **語義化版本**: 使用主版本.次版本.修訂號(v1.2.3)的API版本命名
- **向後兼容承諾**: 同一主版本內保證向後兼容，避免破壞現有功能
- **棄用流程**: 新API版本發布前，舊功能先標記棄用並保留至少6個月
- **版本轉換層**: 伺服器端處理不同版本API請求的轉換，確保舊版客戶端仍能正常運作
- **文檔自動化**: API變更自動反映到開發文檔，確保文檔與實現同步
- **客戶端適配**: 客戶端檢測可用API版本，根據設備功能降級處理

# 6. 管理後台 (桌面版設計)

## 6.1 管理後台功能
- **資料概覽**: 玩家活躍度、留存率等數據統計
- **內容管理**: 編輯遊戲配方、成就等內容
- **會員管理**: 查看和修改會員狀態、權限
- **遊戲監控**: 即時監控伺服器負載和遊戲進行
- **報表系統**: 產生詳細數據報表與視覺化圖表
- **AI內容生成管理**: 配置Google AI提示詞模板，自動生成無限遊戲內容

## 6.2 後台界面設計
```
+--------------------------------------------------------------+
|  料理急先鋒 - 管理後台                          管理員 [登出] |
+----------------+-------------------------------------------+
| 儀表板         |  ★ 系統概況                               |
| 會員管理        |  總會員數: 1,245 | 今日活躍: 328          |
| 遊戲內容        |  CPU: 32% | 記憶體: 45% | 網路: 62Mbps    |
| 成就系統        |                                           |
| 交易記錄        |  ★ 遊戲房間狀態                          |
| 報表中心        |  活躍房間: 24 | 等待配對: 12人            |
| 系統設定        |  高峰時段: 18:00-22:00                    |
| 日誌查詢        |                                           |
| AI內容管理     |  ★ 會員分佈                               |
|                |  [地區分佈圖表]                            |
|                |                                           |
|                |  ★ 近期活動                               |
|                |  週末挑戰賽 (進行中)                       |
|                |  特別菜譜推廣 (計劃中)                     |
+----------------+-------------------------------------------+
```

## 6.3 管理權限分級
- **超級管理員**: 全部功能訪問權限
- **內容管理員**: 僅可編輯遊戲內容，無會員管理權限
- **客服人員**: 處理會員問題，有限的數據訪問權限
- **數據分析師**: 只讀權限，側重於報表和統計數據

## 6.4 數據分析工具
- **玩家行為分析**: 熱力圖顯示玩家操作偏好
- **留存預測**: 基於機器學習的會員流失預測模型
- **A/B測試**: 新功能測試與效果評估
- **遊戲平衡性分析**: 自動檢測過難或過易的配方

# 7. 遊戲流程範例 (手機版)

## 7.1 會員登入流程 (手機版)
```
+--------------------------+
|    料理急先鋒 v1.0      |
|                         |
|   [Logo動畫顯示區域]    |
|                         |
| [使用会员账号一键登录]  |
|                         |
| 或                      |
|                         |
| 帳號: [_______________] |
| 密碼: [***************] |
|                         |
| [登入]                  |
|                         |
| [忘記密碼?] [加入會員]  |
|                         |
| 在線會員: 32人          |
+--------------------------+
```

## 7.2 遊戲進行範例 (手機版)
```
+--------------------------+
| @廚師A        剩餘: 3:45 |
+--------------------------+
| 目前訂單:               |
| 漢堡皇堡 [███░░░] 50%   |
+--------------------------+
|                         |
| 工作台:                 |
| [洋][蕃][肉][_][_]      |
|                         |
+--------------------------+
| 當前操作:               |
| 切洋蔥中... [=====>  ]  |
+--------------------------+
|                         |
| [切]  [拿]  [放]  [傳]  |
|                         |
| [🔊] [😀] [❓] [⚙️]  |
+--------------------------+
```

## 7.3 聊天系統 (手機版)
```
+--------------------------+
| 團隊聊天               X |
+--------------------------+
| 系統: 新訂單「皇家漢堡」 |
|                         |
| @廚師B: 需要更多番茄!   |
|                         |
| @你: 收到，正在處理      |
|                         |
| @廚師C: 牛肉準備好了     |
+--------------------------+
|                         |
| [需要番茄] [需要肉]      |
|                         |
| [收到!] [馬上傳過去]     |
|                         |
| [____________][發送]    |
+--------------------------+
```

# 8. 會員專屬功能 (手機優化)

## 8.1 會員成就系統
- **解鎖通知**: 成就解鎖立即推送通知
- **分享功能**: 一鍵分享成就到社交媒體
- **漸進式挑戰**: 會員等級對應的階梯式成就系統
- **隨身查看**: 隨時查看成就完成進度

## 8.2 VIP會員手機特權
- **優先配對**: 縮短等待時間
- **獨家角色動畫**: 特殊視覺效果
- **額外存檔欄位**: 保存更多遊戲進度
- **免廣告體驗**: 無廣告干擾

## 8.3 社群互動 (手機優化)
- **一鍵邀請**: 透過社交APP邀請好友
- **快速組隊**: 掃描QR碼快速組隊
- **語音聊天**: 遊戲中語音溝通
- **社群動態**: 查看好友遊戲進度

## 8.4 行動支付整合
- **快速支付**: 指紋支付升級會員
- **小額購買**: 便捷購買遊戲道具
- **獎勵回饋**: 首次儲值特別獎勵
- **定期訂閱**: 月度VIP自動續訂選項

## 8.5 會員廚師公會系統
- **公會創建**: 高級會員可創建自己的廚師公會，設定名稱、徽章與規則
- **公會階級**: 公會內可設定不同職位與權限(如學徒、廚師、主廚、行政總廚)
- **公會任務**: 公會專屬合作任務，需多名會員協作完成
- **公會聊天**: 公會專用聊天頻道，支援語音與文字溝通
- **公會競賽**: 不同公會間的定期競賽活動，獎勵積分與專屬徽章
- **招募系統**: 公開招募頁面，會員可瀏覽並申請加入公會
- **公會等級**: 根據公會整體活躍度與成就提升公會等級，解鎖特權
- **公會領地**: 高等級公會可擁有專屬虛擬餐廳空間，展示合作成果

# 9. 實現建議與最佳實踐

## 9.1 行動優先開發策略
- **行動先行**: 先完成手機版本再適配桌面版
- **觸控優先**: 所有界面先考慮觸控操作
- **效能優先**: 確保在中低階手機也能流暢運行
- **數據節約**: 優化資源大小減少下載量

## 9.2 前端框架選擇
- **Vue.js + Capacitor**: 實現類原生APP體驗
- **使用TypeScript**: 確保代碼穩定性和類型安全
- **模塊化設計**: 功能組件獨立，方便維護和擴展
- **響應式設計**: 確保在不同設備上的顯示效果

## 9.3 開發流程建議
- **先實現核心功能**: 優先開發基本料理和協作機制
- **早期實機測試**: 在多款手機上測試確保兼容性
- **增量更新策略**: 允許部分功能更新不需重裝應用
- **A/B測試**: 對關鍵功能進行不同版本測試

## 9.4 行動裝置效能考量
- **電池優化**: 降低耗電量的設計策略
- **網絡優化**: 考慮弱網和斷網情境
- **溫度管理**: 避免手機過熱的優化方案
- **記憶體管理**: 減少記憶體使用量延長遊玩時間

# 10. 技術需求
- **前端**: Vue.js + Capacitor，支援PWA安裝到主螢幕
- **後端**: Node.js伺服器，支援WebSocket
- **資料庫**: MongoDB存儲會員與遊戲數據
- **API**: RESTful API與會員系統整合
- **認證**: JWT令牌與生物識別結合的雙重驗證
- **部署**: 雲端服務，自動擴展架構
- **分析**: 整合行動應用分析工具追蹤使用者行為

# 11. Google AI 整合與自動化內容生成系統

## 11.1 系統概述
- **自動化任務生成**: 使用Google AI API自動生成無限多樣化的料理任務和配方
- **提示詞模板管理**: 管理員可在後台設定與調整AI提示詞模板
- **上下文感知生成**: 根據玩家等級、偏好、遊戲時間生成適合的內容
- **季節性與節日內容**: 自動根據當前日期生成應景料理與活動

## 11.2 提示詞模板類型
- **隨機食材挑戰**: 生成隨機食材組合及配方難度
- **主題任務**: 節日、季節或特殊場合相關的料理任務
- **區域特色菜**: 不同國家或地區的特色料理挑戰
- **食材限制挑戰**: 特定食材類型(如純素、無麩質)的創意料理
- **速度挑戰**: 短時間內完成的簡易料理任務

## 11.3 實現架構
```javascript
// AI 內容生成系統架構
{
  "system": "Google AI API Integration",
  "components": [
    {
      "name": "提示詞模板庫",
      "description": "儲存各類型預設提示詞模板"
    },
    {
      "name": "上下文處理器",
      "description": "分析遊戲狀態與玩家數據"
    },
    {
      "name": "API適配層",
      "description": "處理與Google AI的通訊"
    },
    {
      "name": "內容格式化器",
      "description": "將AI回應轉換為遊戲可用格式"
    }
  ],
  "dataFlow": "上下文處理器 → 提示詞模板庫 → API適配層 → Google AI → 內容格式化器 → 遊戲系統"
}
```

## 11.4 內容生成流程
1. **觸發條件**: 玩家開始新遊戲、每日挑戰更新或管理員手動觸發
2. **上下文收集**: 系統收集玩家等級、偏好、遊戲歷史等數據
3. **提示詞選擇**: 系統選擇或隨機抽取適合的提示詞模板
4. **動態填充**: 以收集的上下文數據填充提示詞變數
5. **API請求**: 發送完整提示詞至Google AI API
6. **回應處理**: 解析AI回應，格式化為遊戲可用的JSON結構
7. **任務部署**: 將生成的任務部署至遊戲系統

## 11.5 管理後台功能
- **提示詞模板編輯器**: 可視化編輯與測試AI提示詞
- **生成歷史紀錄**: 查看之前生成的內容與效果數據
- **手動審核選項**: 對AI生成的內容進行人工審核
- **內容過濾機制**: 確保生成內容符合遊戲風格與適齡標準
- **效能分析**: 分析不同提示詞模板的玩家互動數據

## 11.6 自動化排程
- **每日任務更新**: 自動生成每日特別挑戰
- **週末活動生成**: 週五自動準備週末特別活動內容
- **季節性更新**: 根據節氣與節日自動更新相關內容
- **進階任務階梯**: 隨玩家等級提升自動解鎖更複雜的料理挑戰

## 11.7 玩家體驗優化
- **無感知生成**: 玩家無需等待，後台預生成內容
- **個人化推薦**: 根據玩家喜好推薦適合的料理任務
- **成就整合**: 連結AI生成的挑戰與會員成就系統
- **難度自適應**: 根據玩家表現自動調整生成內容難度

## 11.8 AI關卡生成系統具體實現

### 11.8.1 關卡生成流程
1. **關卡模板設計**:
   - 設計基礎關卡結構模板，包含變量佔位符
   - 定義難度參數與食材組合規則
   - 建立食譜結構化格式

2. **關鍵字獲取機制**:
   - **系統自動獲取**: 通過Google AI生成關鍵字
   - **情境關鍵字**: 基於節日、季節、地區生成主題
   - **玩家數據觸發**: 分析玩家喜好生成個性化關鍵字
   - **即時熱點整合**: 接入熱門話題API獲取時下流行元素

3. **關卡生成流程**:
   ```javascript
   // 關卡生成流程示例
   async function generateGameLevel() {
     // 1. 獲取關鍵字
     const keywords = await fetchKeywordsFromAI({
       difficulty: currentPlayerLevel,
       theme: getCurrentSeason(),
       playerPreferences: getPlayerPreferredIngredients(),
       previousCompletedLevels: getPlayerHistory()
     });
     
     // 2. 選擇合適的關卡模板
     const levelTemplate = selectLevelTemplate(keywords.difficulty);
     
     // 3. 填充模板與食材
     const filledLevel = populateTemplate(levelTemplate, {
       mainIngredients: keywords.ingredients,
       cookingMethods: keywords.methods,
       challengeType: keywords.challenge,
       timeLimit: calculateTimeLimit(keywords.difficulty, playerSkillLevel)
     });
     
     // 4. 驗證關卡可行性
     const isValid = validateLevel(filledLevel);
     if (!isValid) {
       return generateGameLevel(); // 重試生成
     }
     
     // 5. 存儲關卡設計
     saveLevelToDatabase(filledLevel);
     return filledLevel;
   }
   ```

### 11.8.2 AI提示詞設計範例
```
提示詞模板:
生成一個{difficulty}難度的廚房料理挑戰。
需要包含以下元素:
1. 主要食材: 請提供3-{ingredientCount}種適合搭配的主要食材
2. 烹飪方法: 請提供2-3種適合這些食材的烹飪方法
3. 料理名稱: 為這道菜創建一個吸引人的名稱
4. 挑戰要素: 增加1個有趣的時間或技巧挑戰元素
5. 視覺描述: 使用ASCII符號描述這道料理的外觀
6. 難度評分: 1-10的評分及原因

輸出格式:
{
  "dish_name": "料理名稱",
  "main_ingredients": ["食材1", "食材2", "食材3"],
  "cooking_methods": ["方法1", "方法2"],
  "challenge": "挑戰描述",
  "visual": "ASCII視覺呈現",
  "difficulty_score": 數字,
  "difficulty_reason": "難度原因"
}
```

### 11.8.3 關鍵字處理與轉換
1. **語義分析**:
   - 分析AI返回的食材關鍵字，確保遊戲內有對應圖示
   - 將通用烹飪方法映射到遊戲支持的操作指令

2. **難度調整算法**:
   ```javascript
   function adjustDifficulty(aiSuggestion, playerLevel) {
     // 基於玩家等級調整AI建議的難度
     const baseTimeLimit = aiSuggestion.difficulty_score * 30; // 秒
     const playerFactor = Math.max(0.5, 1 - (playerLevel * 0.02));
     
     return {
       timeLimit: Math.round(baseTimeLimit * playerFactor),
       ingredientCount: Math.min(aiSuggestion.main_ingredients.length, playerLevel/5 + 3),
       extraChallenges: playerLevel > 15 ? aiSuggestion.challenge : null
     };
   }
   ```

### 11.8.4 關卡元素映射表
```json
{
  "ingredients_mapping": {
    "牛肉": "[牛]",
    "雞肉": "[雞]",
    "洋蔥": "[洋]",
    "蘑菇": "[菇]",
    "番茄": "[蕃]",
    "起司": "[起]",
    "麵包": "[包]"
  },
  "cooking_methods_mapping": {
    "煎": "煎",
    "烤": "烤",
    "蒸": "蒸",
    "炒": "炒",
    "煮": "煮",
    "燉": "燉"
  },
  "challenge_mapping": {
    "時間壓力": "減少30%時間",
    "完美擺盤": "需達到95%品質",
    "節約使用": "使用最少的食材",
    "連續操作": "3秒內完成連續動作"
  }
}
```

### 11.8.5 關卡預覽與測試
```
// AI生成的關卡預覽範例:
+--------------------------+
| 訂單: 蘑菇起司牛排      |
| 食材: [牛][菇][起][香]   |
| 方法: 煎、烤            |
| 挑戰: 完美火候(3秒判斷)  |
| 時間: 120秒             |
| 難度: 7/10              |
| 預估完成率: 62%         |
+--------------------------+

// 系統自動測試關卡可行性...
// 模擬玩家最佳操作路徑...
// 計算預期完成時間: 103秒
// 關卡評估結果: 通過！關卡已加入資料庫
```

## 11.9 關卡適配與動態調整

### 11.9.1 玩家資料收集系統
- **遊戲表現追蹤**: 記錄完成時間、錯誤率、操作頻率
- **偏好分析**: 分析玩家偏好的食材、料理類型、挑戰模式
- **困難點檢測**: 識別玩家在特定操作或食材上的困難

### 11.9.2 關卡難度自適應
```javascript
function recommendNextLevel(playerData) {
  // 分析玩家最近10場遊戲表現
  const recentPerformance = playerData.recentGames.slice(-10);
  const completionRate = recentPerformance.filter(game => game.completed).length / 10;
  const avgScore = recentPerformance.reduce((sum, game) => sum + game.score, 0) / 10;
  
  // 動態調整下一關卡難度
  if (completionRate > 0.8 && avgScore > 85) {
    // 表現優秀，提供更具挑戰性的關卡
    return requestAILevel({
      difficultyTarget: playerData.currentDifficulty + 1,
      emphasize: playerData.strengths, // 基於玩家優勢
      includeNew: true // 引入新元素
    });
  } else if (completionRate < 0.4) {
    // 表現不佳，提供更友好的關卡
    return requestAILevel({
      difficultyTarget: Math.max(1, playerData.currentDifficulty - 1),
      emphasize: playerData.weaknesses, // 強化玩家弱項
      includeNew: false // 不引入新元素
    });
  } else {
    // 表現中等，提供平衡關卡
    return requestAILevel({
      difficultyTarget: playerData.currentDifficulty,
      emphasize: getMixedElements(playerData),
      includeNew: Math.random() > 0.7 // 30%機率引入新元素
    });
  }
}
```

### 11.9.3 內容生成界面 (管理後台)

管理員可使用的AI關卡生成界面:

```
+---------------------------------------------------------------+
| 料理急先鋒 - AI關卡生成器                                     |
+------------------------+--------------------------------------+
| 關卡基本設置           | 關鍵字與提示詞                       |
|                        |                                      |
| 難度等級: [▼ 選擇]     | 主題關鍵字:                          |
| 目標玩家等級: [____]   | [________________________]           |
| 關卡類型: [▼ 選擇]     |                                      |
| 食材數量: [▼ 選擇]     | 生成方式:                           |
|                        | ○ 全自動  ○ 半自動  ○ 手動指定      |
| 特殊限制:              |                                      |
| □ 時間挑戰            | AI提示詞模板:                        |
| □ 完美品質要求        | [                                   ]|
| □ 特殊操作序列        | [                                   ]|
| □ 稀有食材            | [                                   ]|
|                        | [                                   ]|
+------------------------+--------------------------------------+
| 預覽結果:                                                     |
|                                                               |
| [生成關卡]  [儲存關卡]  [測試可行性]  [調整難度]              |
+---------------------------------------------------------------+
```

### 11.9.4 關卡生成API調用示例
```javascript
// 後端API示例
app.post('/api/generate-level', async (req, res) => {
  try {
    const {
      difficulty,
      playerLevel,
      levelType,
      theme,
      constraints
    } = req.body;
    
    // 構建AI提示詞
    const prompt = buildLevelGenerationPrompt({
      difficulty,
      playerLevel,
      levelType,
      theme,
      constraints
    });
    
    // 調用Google AI API
    const aiResponse = await callGoogleAI(prompt);
    
    // 解析AI回應
    const parsedLevel = parseLevelFromAIResponse(aiResponse);
    
    // 驗證生成的關卡
    const validationResult = validateGeneratedLevel(parsedLevel);
    
    if (validationResult.valid) {
      // 格式化為遊戲可用格式
      const gameReadyLevel = formatForGameEngine(parsedLevel);
      res.json({
        success: true,
        level: gameReadyLevel,
        rawAiResponse: aiResponse // 供開發參考
      });
    } else {
      throw new Error(`關卡驗證失敗: ${validationResult.reason}`);
    }
  } catch (error) {
    console.error('關卡生成錯誤:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
```

# 12. 遊戲內容與關卡設計

## 12.1 遊戲流程概覽

### 12.1.1 進入流程
1. **啟動遊戲**: 玩家點擊APP圖標或開啟網頁
2. **載入畫面**: 顯示BBS風格的載入動畫與遊戲標誌
3. **登入畫面**: 出現會員登入介面
4. **身分驗證**: 完成會員登入或一鍵登入(生物識別)
5. **主選單**: 進入遊戲大廳主選單

### 12.1.2 遊戲大廳
1. **每日任務**: 顯示每日挑戰與獎勵
2. **個人檔案**: 顯示玩家等級、積分與成就
3. **房間選擇**: 可瀏覽開放中的遊戲房間
4. **快速加入**: 自動配對同等級玩家的房間
5. **創建房間**: 高級會員可創建自定義規則房間

### 12.1.3 遊戲進行
1. **配對完成**: 四名玩家齊全後開始倒數
2. **角色選擇**: 玩家選擇偏好的工作站(切菜、烹飪、組裝、裝盤)
3. **教學提示**: 新手玩家顯示基本操作教學
4. **關卡開始**: 顯示首批訂單與倒數計時器
5. **遊戲循環**: 協作完成料理訂單直到時間結束
6. **結算畫面**: 顯示團隊得分、個人表現與獎勵

### 12.1.4 離開流程
1. **結算確認**: 玩家確認獲得的積分與成就
2. **繼續選項**: 可選擇繼續遊戲或返回大廳
3. **反饋提示**: 簡短遊戲體驗調查(每5次遊戲顯示一次)
4. **離線設定**: 可設定離線通知與下次登入提醒
5. **退出遊戲**: 返回主畫面，保存遊戲進度

## 12.2 關卡設計與難度曲線

### 12.2.1 初級關卡 (新手村)
- **關卡1-5**: 單一類型簡易料理，寬鬆時間限制
- **主要目標**: 熟悉基本操作與協作機制
- **訂單示例**: 簡易漢堡、基本沙拉、單一飲料
- **限時**: 5分鐘，失誤容錯率高
- **獎勵**: 基礎積分、新手成就

```
初級關卡訂單示例:
+--------------------------+
| 訂單: 基本漢堡          |
| 需求: [包][≣][≋][包]    |
| 步驟: 1.烤麵包 2.煎肉   |
|      3.切生菜 4.組合    |
| 時間: 90秒              |
| 獎勵: 50積分            |
+--------------------------+
```

### 12.2.2 中級關卡 (技能成長)
- **關卡6-15**: 多元料理組合，需切換工作站
- **主要目標**: 培養團隊協作與時間管理
- **訂單示例**: 複合漢堡、沙拉拼盤、套餐組合
- **限時**: 8分鐘，適中時間壓力
- **獎勵**: 進階積分、專業技能點數

```
中級關卡訂單示例:
+--------------------------+
| 訂單: 豪華芝士漢堡套餐  |
| 需求: [包][≣][≋][起][包] |
|      +[薯][可]          |
| 步驟: 1-6.製作芝士漢堡  |
|      7.油炸薯條 8.倒飲料|
| 時間: 120秒             |
| 獎勵: 120積分+10技能點  |
+--------------------------+
```

### 12.2.3 高級關卡 (專業挑戰)
- **關卡16-30**: 複雜菜式，精確時間控制
- **主要目標**: 提升效率與精確度
- **訂單示例**: 多層料理、特殊烹飪方法、多訂單同時處理
- **限時**: 10分鐘，高度時間壓力
- **獎勵**: 高級積分、稀有廚具、專屬頭銜

```
高級關卡訂單示例:
+--------------------------+
| 訂單: 豪華自助餐       |
| 同時處理:              |
| 1. 牛排配蘑菇醬        |
| 2. 海鮮燉飯            |
| 3. 水果沙拉塔          |
| 4. 特調飲品            |
| 時間: 240秒            |
| 獎勵: 300積分+稀有道具  |
+--------------------------+
```

### 12.2.4 專家關卡 (大師挑戰)
- **關卡31+**: 創意菜式、極限挑戰
- **主要目標**: 極致配合與策略運用
- **訂單示例**: 主廚特餐、節日料理、隨機食材挑戰
- **限時**: 15分鐘，極限挑戰
- **獎勵**: 傳奇積分、獨家裝飾、大師頭銜

## 12.3 遊戲模式詳解

### 12.3.1 經典模式
- **特點**: 標準4人協作，固定難度曲線
- **關卡結構**: 依序解鎖，難度漸增
- **計分方式**: 成功訂單數 × 品質評分
- **適合玩家**: 所有玩家，尤其是新手

### 12.3.2 挑戰模式
- **特點**: 隨機訂單，時間壓力大
- **關卡結構**: 波次型訂單，越後越難
- **計分方式**: 速度加成 × 完成度 × 難度係數
- **適合玩家**: 中高級玩家，尋求刺激

### 12.3.3 創意模式
- **特點**: 限定食材，自由發揮創意
- **關卡結構**: 給予素材，玩家自行設計菜色
- **計分方式**: 創意度 × 完整度 × 團隊協作評分
- **適合玩家**: 有創意的資深玩家

### 12.3.4 賽季活動
- **特點**: 限時活動，特殊規則與獎勵
- **關卡結構**: 主題系列任務，例如「春節特輯」
- **計分方式**: 常規得分 + 特殊任務加分
- **適合玩家**: 所有玩家，特別是收藏家

## 12.4 場景與主題設計

### 12.4.1 基本場景
- **小型餐廳**: 初始場景，基礎設備
- **工作站排列**: 線性排列，適合新手協作
- **視覺風格**: 簡潔明亮的BBS風格圖案

### 12.4.2 進階場景
- **大型餐廳**: 解鎖場景，更多工作台
- **工作站排列**: 環形或T型排列，需要更精密協作
- **視覺風格**: 更複雜的ASCII圖案，更多顏色變化

### 12.4.3 主題場景
- **節日廚房**: 應景節日裝飾與特殊訂單
- **戶外BBQ**: 特殊烹飪方法與食材
- **豪華遊輪**: 高級料理需求，VIP客戶訂單
- **太空站**: 未來風格，特殊操作機制

## 12.5 具體遊戲對局示例

### 12.5.1 玩家進入遊戲

```
+--------------------------+
|   料理急先鋒 v1.0        |
|   歡迎回來，@大廚狂人    |
|   [VIP會員 Lv.23]        |
+--------------------------+
```

### 12.5.2 房間配對成功

```
+--------------------------+
|  房間#2481 配對成功!    |
|                         |
|  @大廚狂人   Lv.23      |
|  @料理魔法師 Lv.19      |
|  @東京小當家 Lv.21      |
|  @義麵女神   Lv.20      |
|                         |
|  模式: 經典模式         |
|  難度: 中級             |
|                         |
|  遊戲將在 5 秒後開始... |
+--------------------------+
```

### 12.5.3 工作站選擇

```
+--------------------------+
|   選擇你的工作站:       |
|                         |
|   1. [切] 前處理站      |
|      擅長: @料理魔法師   |
|                         |
|   2. [火] 烹飪站        |
|      擅長: @大廚狂人     |
|                         |
|   3. [=] 組裝站         |
|      無人選擇            |
|                         |
|   4. (:) 裝盤站         |
|      擅長: @東京小當家   |
|                         |
|   選擇倒數: 10秒        |
+--------------------------+
```

### 12.5.4 遊戲進行中

```
+--------------------------+
| @大廚狂人      剩餘: 7:32|
+--------------------------+
| 當前訂單:               |
| 豪華牛肉漢堡 [██░░░] 40%|
| 蘑菇濃湯     [███░░] 60%|
+--------------------------+
| 工作站: [火] 烹飪站     |
|                         |
| [肉]在烹飪... [===>  ] 68%|
| [菇][洋][香草]等待處理  |
+--------------------------+
| 團隊狀況:               |
| @料理魔法師: 正在切香草  |
| @東京小當家: 正在裝蘑菇湯|
| @義麵女神: 正在組合漢堡 |
+--------------------------+
| [煎] [烤] [燉] [炒]     |
| [急需香草!][湯快好了!]  |
+--------------------------+
```

### 12.5.5 訂單完成

```
+--------------------------+
| 訂單完成!               |
| 豪華牛肉漢堡            |
|                         |
| 品質評分: A (94分)      |
| 時間: 78秒 (標準: 90秒) |
| 速度獎勵: +15分         |
|                         |
| 獲得: 125積分           |
| 團隊協作: 優秀 (+20積分)|
|                         |
| 下一訂單準備中...        |
+--------------------------+
```

### 12.5.6 遊戲結算

```
+--------------------------+
| 遊戲結束!               |
|                         |
| 團隊成績:               |
| 完成訂單: 12/15         |
| 總得分: 1240分          |
| 團隊評級: A             |
|                         |
| 個人表現:               |
| @大廚狂人: 355分 (最佳烹飪)|
| @料理魔法師: 320分       |
| @東京小當家: 345分       |
| @義麵女神: 220分        |
|                         |
| [再來一局] [返回大廳]    |
+--------------------------+
```

### 12.5.7 獎勵與解鎖

```
+--------------------------+
| 恭喜! 獲得獎勵:         |
|                         |
| +355 會員積分           |
| +2 技能點數             |
| 解鎖成就: 「烹飪大師」   |
| 解鎖新裝備: 「大廚帽」   |
|                         |
| 等級提升!               |
| Lv.23 → Lv.24           |
| 解鎖新關卡: 「海鮮盛宴」 |
|                         |
| [確認]                  |
+--------------------------+
```

## 12.6 進階遊戲策略與互動

### 12.6.1 角色技能組合
- **前處理專家 + 烹飪達人**: 快速準備與烹飪流程
- **組裝大師 + 裝盤藝術家**: 高品質成品呈現
- **全能型配置**: 每個工作站分配不同特長玩家

### 12.6.2 食材策略
- **預處理策略**: 提前準備常用食材
- **批量處理**: 同類食材一次處理多份
- **關鍵路徑**: 識別並優先處理限制性食材

### 12.6.3 溝通模式
- **標準呼叫**: 使用預設短語快速溝通
- **優先標記**: 標記緊急需求的食材或步驟
- **進度報告**: 定期分享各站進度情況

# 13. 系統架構與技術實現規劃

## 13.1 系統架構圖

```
+--------------------------------------------------------------------+
|                        客戶端 (前端)                                |
+--------------------------------------------------------------------+
|                                                                    |
|  +-------------+    +-------------+    +-------------+             |
|  | 登入模組    |    | 遊戲核心    |    | 互動界面    |             |
|  +-------------+    +-------------+    +-------------+             |
|  | - JWT認證   |    | - 遊戲邏輯  |    | - UI元件    |             |
|  | - 生物識別  |    | - 狀態管理  |    | - 觸控處理  |             |
|  | - 會員整合  |    | - 動畫系統  |    | - 聊天系統  |             |
|  +-------------+    +-------------+    +-------------+             |
|                                                                    |
|  +-------------+    +-------------+    +-------------+             |
|  | 網絡模組    |    | 資源管理    |    | 離線緩存    |             |
|  +-------------+    +-------------+    +-------------+             |
|  | - WebSocket |    | - 圖像資源  |    | - IndexedDB |             |
|  | - REST API  |    | - 音效資源  |    | - 本地存儲  |             |
|  | - 重連機制  |    | - 文本資源  |    | - 斷點續玩  |             |
|  +-------------+    +-------------+    +-------------+             |
|                                                                    |
+--------------------------------------------------------------------+
                               |
                               | HTTPS/WSS
                               V
+--------------------------------------------------------------------+
|                        伺服器 (後端)                                |
+--------------------------------------------------------------------+
|                                                                    |
|  +-------------+    +-------------+    +-------------+             |
|  | API層       |    | 業務邏輯層  |    | 資料存取層  |             |
|  +-------------+    +-------------+    +-------------+             |
|  | - REST端點  |    | - 遊戲規則  |    | - 資料模型  |             |
|  | - WS處理器  |    | - 會員服務  |    | - ORM映射   |             |
|  | - 版本控制  |    | - 關卡生成  |    | - 查詢優化  |             |
|  +-------------+    +-------------+    +-------------+             |
|                                                                    |
|  +-------------+    +-------------+    +-------------+             |
|  | 安全層      |    | AI整合層    |    | 監控與日誌  |             |
|  +-------------+    +-------------+    +-------------+             |
|  | - 認證授權  |    | - Google AI |    | - 性能指標  |             |
|  | - 請求驗證  |    | - 模板管理  |    | - 錯誤追蹤  |             |
|  | - 資料加密  |    | - 輸出過濾  |    | - 使用分析  |             |
|  +-------------+    +-------------+    +-------------+             |
|                                                                    |
+--------------------------------------------------------------------+
                               |
                               |
                               V
+--------------------------------------------------------------------+
|                        資料持久層                                   |
+--------------------------------------------------------------------+
|                                                                    |
|  +-------------+    +-------------+    +-------------+             |
|  | PostgreSQL  |    | Redis       |    | 檔案存儲    |             |
|  +-------------+    +-------------+    +-------------+             |
|  | - 會員數據  |    | - 會話緩存  |    | - 圖片資源  |             |
|  | - 遊戲紀錄  |    | - 實時排名  |    | - 音頻資源  |             |
|  | - 關卡數據  |    | - 配對佇列  |    | - 靜態資源  |             |
|  +-------------+    +-------------+    +-------------+             |
|                                                                    |
+--------------------------------------------------------------------+
```

## 13.2 數據流程圖

```
+---------------+     +---------------+     +---------------+
|               |     |               |     |               |
|  玩家操作     |---->|  狀態更新     |---->|  界面渲染     |
|               |     |               |     |               |
+---------------+     +---------------+     +---------------+
       |                     ^                     |
       |                     |                     |
       v                     |                     v
+---------------+     +---------------+     +---------------+
|               |     |               |     |               |
|  WebSocket    |---->|  伺服器處理   |---->|  廣播狀態     |
|  發送操作     |     |  同步邏輯     |     |  給其他玩家   |
|               |     |               |     |               |
+---------------+     +---------------+     +---------------+
```

## 13.3 PostgreSQL資料庫結構設計

### 13.3.1 關聯式資料模型

```sql
-- 會員基本資訊表 (此為示意，實際使用主系統的 `box_users` 表)
/*
CREATE TABLE box_users (
  user_id SERIAL PRIMARY KEY,
  username VARCHAR(50) NOT NULL UNIQUE,
  ...
);
*/

-- 遊戲玩家資料表
CREATE TABLE cook_players (
  player_id SERIAL PRIMARY KEY,
  user_id INTEGER NOT NULL REFERENCES box_users(user_id) ON DELETE CASCADE UNIQUE,
  username VARCHAR(50) NOT NULL, -- 為方便查詢而冗餘的欄位
  level INTEGER DEFAULT 1,
  points INTEGER DEFAULT 0,
  achievements JSONB DEFAULT '[]'::jsonb,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  last_login TIMESTAMP WITH TIME ZONE
);

-- 會員角色表
CREATE TABLE cook_roles (
  role_id SERIAL PRIMARY KEY,
  role_name VARCHAR(30) NOT NULL,
  role_description TEXT,
  permission_level INTEGER NOT NULL
);

-- 會員角色關聯表
CREATE TABLE cook_user_roles (
  user_id INTEGER REFERENCES cook_players(player_id),
  role_id INTEGER REFERENCES cook_roles(role_id),
  PRIMARY KEY (user_id, role_id)
);

-- 料理配方表 (注意: 目前為硬編碼實現，此表為未來規劃)
CREATE TABLE cook_recipes (
  recipe_id SERIAL PRIMARY KEY,
  recipe_name VARCHAR(100) NOT NULL,
  recipe_description TEXT,
  difficulty INTEGER CHECK (difficulty BETWEEN 1 AND 10),
  ingredients_json JSONB NOT NULL, -- 使用JSONB儲存食材需求
  steps_json JSONB NOT NULL, -- 使用JSONB儲存烹飪步驟
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- 遊戲食材表 (注意: 目前為硬編碼實現，此表為未來規劃)
CREATE TABLE cook_ingredients (
  ingredient_id SERIAL PRIMARY KEY,
  ingredient_name VARCHAR(50) NOT NULL,
  ingredient_type VARCHAR(30) NOT NULL,
  ascii_symbol VARCHAR(10) NOT NULL,
  properties JSONB -- 使用JSONB儲存靈活的屬性
);

-- 成就表
CREATE TABLE cook_achievements (
  achievement_id SERIAL PRIMARY KEY,
  achievement_name VARCHAR(100) NOT NULL,
  description TEXT,
  condition_json JSONB NOT NULL, -- 使用JSONB儲存解鎖條件
  reward_points INTEGER DEFAULT 0
);

-- 會員成就關聯表
CREATE TABLE cook_user_achievements (
  user_id INTEGER REFERENCES cook_players(player_id),
  achievement_id INTEGER REFERENCES cook_achievements(achievement_id),
  unlock_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  display_status BOOLEAN DEFAULT TRUE,
  PRIMARY KEY (user_id, achievement_id)
);

-- 遊戲房間表 (取代原有的 sessions 和 session_players)
CREATE TABLE cook_game_rooms (
  room_id VARCHAR(255) PRIMARY KEY,
  room_name VARCHAR(100) NOT NULL,
  difficulty VARCHAR(50) DEFAULT 'normal',
  status VARCHAR(20) DEFAULT 'waiting', -- e.g., 'waiting', 'starting', 'playing', 'finished'
  creator_id INTEGER REFERENCES box_users(user_id) ON DELETE SET NULL,
  creator_name VARCHAR(50),
  game_state JSONB NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
/*
-- game_state JSONB 結構範例:
{
  "players": [
    {
      "id": 1,
      "username": "廚師A",
      "level": 5,
      "avatar": "/images/avatar.png",
      "ready": true,
      "inventory": [
        {"id": "item1", "type": "beef_cooked", "state": "cooked"},
        null,
        null,
        null,
        null
      ],
      "activeSlot": 0
    }
  ],
  "score": 50,
  "timeRemaining": 180,
  "orders": [
    {
      "id": "order123",
      "recipe": "burger_basic",
      "totalTime": 90,
      "timeRemaining": 75,
      "createdAt": 1629878400000
    }
  ],
  "status": "playing"
}
*/

-- 遊戲對局表 (已棄用, 功能整合至 cook_game_rooms.game_state)
-- CREATE TABLE cook_game_sessions (...);

-- 對局玩家表 (已棄用, 功能整合至 cook_game_rooms.game_state)
-- CREATE TABLE cook_session_players (...);

-- 使用者裝置資訊表
CREATE TABLE cook_user_devices (
  device_id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES cook_players(player_id),
  device_type VARCHAR(50),
  screen_size VARCHAR(30),
  last_login_device BOOLEAN DEFAULT FALSE,
  user_agent TEXT,
  last_active TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- AI生成的關卡表
CREATE TABLE cook_ai_levels (
  level_id SERIAL PRIMARY KEY,
  level_name VARCHAR(100) NOT NULL,
  difficulty INTEGER CHECK (difficulty BETWEEN 1 AND 10),
  theme VARCHAR(50),
  content_json JSONB NOT NULL, -- 使用JSONB儲存關卡內容
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  created_by INTEGER REFERENCES cook_players(player_id),
  is_approved BOOLEAN DEFAULT FALSE
);
```

### 13.3.2 關聯式資料庫優勢
- **資料完整性**: 使用外鍵約束確保資料關聯的完整性
- **事務處理**: 支援ACID事務，確保遊戲資料操作的一致性
- **複雜查詢**: 強大的SQL查詢能力，支援分析和報表生成
- **靈活性與結構性並存**: 使用JSONB類型兼具結構化與半結構化資料的優勢
- **成熟生態**: 豐富的工具、擴展和社群支援

### 13.3.3 PostgreSQL性能優化策略
- **索引優化**: 針對頻繁查詢字段建立適當索引
- **查詢優化**: 使用EXPLAIN ANALYZE分析和優化慢查詢
- **分區表**: 對大型資料表如遊戲紀錄使用分區表
- **連接池**: 使用pg-pool管理資料庫連接
- **緩存層**: 使用Redis緩存熱門資料，減輕資料庫負載

# 14. 前後端分離與API設計

## 14.1 RESTful API 端點設計

| 端點                        | 方法   | 描述                           | 權限需求       |
|-----------------------------|--------|-------------------------------|---------------|
| /api/auth/login             | POST   | 會員登入                       | 公開          |
| /api/auth/refresh           | POST   | 更新JWT令牌                    | 已登入用戶    |
| /api/users/profile          | GET    | 獲取會員資料                   | 已登入用戶    |
| /api/users/achievements     | GET    | 獲取會員成就                   | 已登入用戶    |
| /api/games/rooms            | GET    | 獲取房間列表                   | 已登入用戶    |
| /api/games/rooms            | POST   | 建立新遊戲房間                 | 高級會員      |
| /api/games/rooms/:id/join   | POST   | 加入遊戲房間                   | 已登入用戶    |
| /api/games/:id/history      | GET    | 獲取遊戲歷史                   | 遊戲參與者    |
| /api/recipes                | GET    | 獲取食譜列表                   | 已登入用戶    |
| /api/leaderboard            | GET    | 獲取排行榜                     | 公開          |
| /api/ai/generate-level      | POST   | 生成AI關卡                     | 管理員        |
| /api/admin/stats            | GET    | 獲取系統統計                   | 管理員        |

## 14.2 WebSocket 事件規範

| 事件類型        | 方向            | 資料結構                                         | 描述                       |
|-----------------|-----------------|--------------------------------------------------|----------------------------|
| `authenticate`    | C → S | `{ "type": "authenticate", "token": "..." }`     | 使用JWT進行WebSocket連接認證 |
| `auth_success`  | S → C | `{ "type": "auth_success" }`                     | 認證成功                   |
| `join_room`       | C → S | `{ "type": "join_room", "roomId": "..." }`       | 玩家請求加入房間           |
| `leave_room`      | C → S | `{ "type": "leave_room", "roomId": "..." }`      | 玩家請求離開房間           |
| `player_ready`    | C → S | `{ "type": "player_ready" }`                     | 玩家設定為準備狀態         |
| `player_unready`  | C → S | `{ "type": "player_unready" }`                   | 玩家取消準備狀態           |
| `start_game`      | C → S | `{ "type": "start_game" }`                       | 房主請求開始遊戲           |
| `chat_message`    | C → S | `{ "text": "..." }`                              | 發送聊天訊息               |
| `player_action`   | C → S | `{ "action": "...", "data": {} }`                | 執行遊戲中的核心操作       |
| ` ` - `pick_ingredient` | | `data: {"ingredientType": "...", "slotIndex": ...}` | 從食材站拿取食材           |
| ` ` - `cook_item`   | | `data: {"slotIndex": ...}`                       | 在烹飪站烹飪物品           |
| ` ` - `assemble_items`| | `data: {}`                                       | 在組裝站組合料理           |
| ` ` - `serve_dish`  | | `data: {"slotIndex": ...}`                       | 在上菜站上菜               |
| ` ` - `transfer_item`| | `data: {"fromSlot": ..., "toPlayerId": ...}`      | 將物品傳給其他玩家         |
| ` ` - `select_slot` | | `data: {"slotIndex": ...}`                       | 選擇庫存中的作用中物品     |
| `room_info`       | S → C | `{ "room": { ... } }`                            | 伺服器發送房間詳細資訊     |
| `player_list`     | S → C | `{ "players": [ ... ] }`                         | 廣播更新後的玩家列表       |
| `player_joined`   | S → C | `{ "playerName": "..." }`                        | 廣播有新玩家加入           |
| `player_left`     | S → C | `{ "playerName": "...", "newCreator": "..." }`   | 廣播有玩家離開，可能含新房主 |
| `chat_message`    | S → C | `{ "sender": "...", "text": "...", "avatar": "..." }` | 廣播聊天訊息               |
| `game_starting`   | S → C | `{ "countdown": 3 }`                             | 廣播遊戲開始倒數           |
| `game_started`    | S → C | `{ "gameState": { ... } }`                       | 廣播遊戲正式開始及初始狀態 |
| `game_state`      | S → C | `{ "gameState": { ... } }`                       | (重連時)發送完整遊戲狀態   |
| `order_completed` | S → C | `{ "orderId": ..., "points": ..., "newScore": ... }` | 廣播訂單完成               |
| `new_order`       | S → C | `{ "order": { ... } }`                           | 廣播新訂單生成             |
| `player_action`   | S → C | `{ "playerId": ..., "action": ..., "data": {} }`  | 廣播其他玩家的動作         |
| `dish_served`     | S → C | `{ "success": true, "orderId": ..., "newScore": ... }` | (對操作者)確認上菜成功     |
| `error`           | S → C | `{ "message": "..." }`                           | 發送錯誤訊息               |
| `game_over`       | S → C | `{ "results": {}, "rewards": {} }`               | 遊戲結束結算               |

## 14.3 API文檔生成與維護
- **使用Swagger/OpenAPI**: 自動生成API文檔
- **API版本控制**: 使用URL路徑版本(如`/api/v1/`)
- **開發者中心**: 提供互動式API探索工具
- **自動化測試**: 確保API規格一致性
- **監控與分析**: 追蹤API使用情況與性能指標

# 15. 測試與質量保證計劃

## 15.1 測試策略概覽

| 測試類型      | 目標                    | 工具                    | 覆蓋範圍             |
|--------------|-------------------------|------------------------|---------------------|
| 單元測試      | 檢驗組件功能            | Jest, Mocha            | 核心邏輯, 工具函數   |
| 整合測試      | 驗證模組協作            | Cypress               | API, 服務整合        |
| UI測試        | 確保界面功能            | Cypress, Puppeteer    | 用戶界面, 操作流程   |
| 性能測試      | 評估系統負載能力        | k6, JMeter           | API響應時間, 同時連接|
| 相容性測試    | 確保跨設備功能          | BrowserStack         | 瀏覽器, 手機型號     |
| 易用性測試    | 評估用戶體驗            | 用戶測試, 問卷        | 操作流程, 界面設計   |
| 安全測試      | 識別安全漏洞            | OWASP ZAP, SonarQube | 驗證, 注入, XSS     |

## 15.2 測試自動化流程
1. **提交觸發**: 代碼提交時自動執行單元測試
2. **夜間構建**: 每晚執行完整測試套件
3. **版本發布**: 發布前執行全面回歸測試
4. **持續監控**: 生產環境性能與錯誤監控

## 15.3 品質指標與標準
- **代碼覆蓋率**: 核心模塊 > 90%, 總體 > 75%
- **最大響應時間**: API < 300ms, WebSocket < 100ms
- **穩定性標準**: 錯誤率 < 0.1%, 可用性 > 99.9%
- **UI標準**: 操作反饋 < 200ms, 加載時間 < 2s

# 16. 部署與發布策略

## 16.1 部署架構
系統部署在像Render這樣的雲端平台上，作為一個單一的Node.js服務實例。
- **入口點**: 所有來自使用者的流量，無論是HTTP還是WebSocket，都首先由負載均衡器（如Cloudflare）接收，然後轉發到單一的伺服器應用。
- **整合服務**: 伺服器內部：
  - **Express.js** 處理所有HTTP請求，根據URL路徑將請求分發給靜態文件服務、主系統API或遊戲API (`/cook-api`)。
  - **WebSocket.Server** 實例監聽所有WebSocket升級請求。它檢查請求的URL路徑 (`/ws` 或 `/cook-ws`)，並將連接交給相應的邏輯模組處理。
- **後端依賴**: 應用程式連接到PostgreSQL資料庫進行數據持久化，並可能使用Redis進行會話緩存和排行榜等即時功能。

```
           [使用者]
              |
          [Cloudflare]  <-- CDN與DDoS防護
              |
              |
        [整合式服務器]  <-- 單一應用部署
        /     |     \
       /      |      \
 [靜態資源] [主系統API] [遊戲API]
       \      |      /
        \     |     /
      [WebSocket服務]
       /           \
      /             \
[/ws路徑]       [/cook-ws路徑]
      \             /
       \           /
        [Redis叢集]  <-- 狀態管理
              |
        [PostgreSQL]  <-- 關聯式資料庫
```

## 16.2 CI/CD 流程
1. **代碼提交**: 開發人員提交至版本控制
2. **自動測試**: 執行單元與整合測試
3. **構建階段**: 打包前端資源, 構建後端映像
4. **預發布**: 部署至測試環境進行驗證
5. **自動部署**: 通過檢查後部署至生產環境
6. **部署監控**: 監控新版本性能與穩定性

## 16.3 版本發布策略
- **藍綠部署**: 維持兩套環境無縫切換
- **金絲雀發布**: 向小部分用戶推出新功能
- **功能開關**: 可遠程控制功能啟用/關閉
- **回滾機制**: 問題發生時快速回復舊版本

# 17. 項目時間表與里程碑

## 17.1 開發階段與時間表

| 階段               | 時間範圍       | 主要目標                           | 交付物                     |
|-------------------|---------------|-----------------------------------|-----------------------------|
| 需求分析與設計     | 第1-2週       | 完成需求收集與系統設計              | 需求文檔, 系統架構圖         |
| 核心功能開發       | 第3-6週       | 實現基本遊戲機制與界面              | 可運行原型, API基礎實現      |
| 會員系統整合       | 第7-8週       | 與主系統會員體系整合                | 完整登入流程, 會員數據同步   |
| 內容製作           | 第9-12週      | 建立食材庫, 配方系統                | 完整食材庫, 關卡設計        |
| Google AI 整合    | 第13-14週     | 實現AI關卡生成系統                  | AI關卡生成功能, 模板庫      |
| 測試與優化         | 第15-16週     | 全面測試與效能優化                  | 測試報告, 優化清單         |
| 發布準備           | 第17-18週     | 最終調整與部署準備                  | 發布版本, 部署文檔         |

## 17.2 關鍵里程碑

| 里程碑                   | 預計日期      | 衡量標準                           |
|-------------------------|--------------|-----------------------------------|
| 概念驗證完成             | Week 4       | 基本遊戲循環可演示                  |
| Alpha 版本              | Week 10      | 核心功能完整, 內部測試可用          |
| Beta 版本               | Week 15      | 全功能完整, 邀請測試開始            |
| 正式發布準備             | Week 18      | 所有測試通過, 準備公開發布          |
| 首次更新計劃             | Week 22      | 基於用戶反饋的首個功能更新          |

## 17.3 資源分配

| 角色               | 人數       | 主要職責                                     |
|-------------------|------------|--------------------------------------------|
| 前端工程師         | 2          | UI/UX實現, 前端邏輯, 動畫系統                |
| 後端工程師         | 2          | API開發, 遊戲邏輯, 資料庫設計                |
| AI整合專家         | 1          | Google AI API整合, 提示詞設計               |
| UI/UX設計師        | 1          | 視覺設計, 互動設計, ASCII圖形設計            |
| QA測試人員         | 1          | 測試計劃執行, 錯誤報告, 用戶體驗評估          |
| 專案經理           | 1          | 進度跟踪, 資源協調, 風險管理                 |

# 18. 未來擴展與維護計劃

## 18.1 計劃功能擴展
- **跨平台原生應用**: 開發iOS/Android原生應用
- **高級社交功能**: 好友系統, 戰隊對戰, 錦標賽
- **自定義廚房**: 可自由布置的個人廚房空間
- **創意工作坊**: 會員可創建並分享自己的料理配方
- **高級AI整合**: 更深入的AI互動與程序化內容生成

## 18.2 長期維護策略
- **每週小更新**: 修復問題, 調整平衡性
- **月度內容更新**: 新食材, 新配方, 新挑戰
- **季度主題更新**: 大型內容包, 新功能, 新主題
- **年度大型更新**: 系統性重大更新, 新玩法

## 18.3 社群與用戶反饋體系
- **官方論壇**: 建立專屬社區討論區
- **內遊戲反饋**: 遊戲內直接提交意見功能
- **Beta測試計劃**: 邀請活躍會員參與新功能測試
- **數據分析**: 建立用戶行為分析系統, 指導開發決策


# 19. 近期修復與調整紀錄

### 19.1 使用者介面 (UI) 修正

- **統一的使用者狀態欄**: 在所有遊戲相關頁面 (`cook-lobby.html`, `cook-game-room.html`, `cook-game.html`, `cook-result.html`, `cook-help.html`) 的左上角新增並統一了使用者狀態顯示。此組件顯示玩家頭像和名稱，並採用了適合深色主題的樣式。
- **修正大廳頁面樣式**: 解決了 `cook-lobby.html` 中使用者狀態顯示異常（顯示為大圖）的問題，確保其樣式與其他頁面一致。

### 19.2 核心功能與流程修復

- **遊戲房間載入問題**: 解決了 `cook-game-room.html` 頁面卡在「載入中」的問題。修復方式為在客戶端發送 `join_room` WebSocket 事件時，明確包含 `userId`，確保伺服器能正確識別玩家身份並回傳房間資料。
- **房間建立與加入流程**: 修正了 `cook-lobby.html` 中「創建房間」按鈕無響應的問題，並完善了加入房間的流程。

### 19.3 後端與網路通訊

- **WebSocket 連線問題**: 修正了先前 WebSocket 連線端點錯誤的問題，確保所有遊戲頁面都連接到正確的 `/cook-ws` 路徑，並在 `cook-game-room.html` 中完善了重連與錯誤處理機制。
- **身份驗證流程**: 改善了橫跨主站與遊戲的 `token` 處理邏輯，減少因 `token` 失效或遺失導致的非預期頁面跳轉。

### 19.4 遊戲房間穩定性與後端邏輯重構

- **後端 WebSocket 邏輯重構**:
  - 全面重寫了 `handleAuthenticatedMessage` 函數，為 `join_room`, `leave_room`, `player_ready`, `chat_message`, `start_game` 等核心房間操作提供了穩定且完整的業務邏輯。
  - 新增 `broadcastToRoom` 輔助函數，標準化了向房間內所有玩家廣播訊息的流程。
  - 新增 `handlePlayerLeave` 輔助函數，完整處理玩家離開或斷線時的場景，包括房主轉移和房間狀態更新。
  - 確保了玩家的 WebSocket 連接實例 (`ws`) 與其在房間內的 `player` 物件正確綁定，解決了之前無法對特定玩家發送訊息的問題。

- **修正房間創建邏輯**:
  - 修復了創建房間 API 中房主 ID 不正確的問題 (將 `req.user.id` 修正為 `req.user.userId`)。
  - 擴充了房間物件的結構，明確加入 `creatorId` 和 `creator` 欄位，使房主資訊更清晰。

- **客戶端-伺服器通訊修正**:
  - 解決了遊戲房間頁面因 WebSocket 連線後立即中斷而無限循環載入的問題。
  - 透過對後端邏輯的重構和修正前端 `join_room` 事件的發送格式，確保了客戶端加入房間的流程穩定可靠。

### 19.5 資料庫整合與用戶資料處理

- **用戶資料整合**: 修正了 `/users/profile` API 的查詢邏輯，使其正確從 `cook_players` 表中獲取遊戲相關資料，包括 `level`, `points`, `achievements` 和 `last_login` 等欄位。
- **資料欄位映射**: 調整了資料欄位的映射方式，確保前端接收到的資料格式一致，並為遊戲特有欄位添加了 `player_` 前綴以避免與主系統欄位衝突。
- **預設值處理**: 為首次遊玩的用戶提供了合理的預設值，如 `player_level: 1` 和 `player_points: 0`，確保新玩家體驗的順暢。

### 19.6 WebSocket 連接管理

- **活躍連接追蹤**: 實現了 `activeConnections` Map 來追蹤用戶 ID 與其 WebSocket 連接的對應關係，便於精確定向發送消息。
- **心跳機制優化**: 完善了 WebSocket 的心跳檢測機制，及時清理斷開的連接，減少服務器資源佔用。
- **錯誤處理增強**: 為 WebSocket 連接添加了更完善的錯誤處理和日誌記錄，便於問題排查。

### 19.7 下一步優化計劃

- **遊戲核心邏輯實現**: 完成遊戲開始後的核心玩法邏輯，包括食材處理、烹飪流程和玩家協作機制。
- **關卡生成系統**: 實現基於 Google AI API 的動態關卡生成系統，提供無限遊戲內容。
- **性能監控**: 添加系統性能監控，及時發現並解決可能的瓶頸問題。
- **用戶體驗優化**: 基於初期用戶反饋，進一步優化遊戲界面和操作流程。

### 19.8 完整遊戲循環與核心機制實現

- **後端核心邏輯 (Backend Core Logic)**:
    - **玩家動作實現**: 在 `cook-kitchen-rush.js` 中實現了完整的玩家動作處理，包括 `pick_ingredient`, `cook_item`, `assemble_items`, `serve_dish`, 和 `transfer_item`。所有動作都與資料庫中的 `game_state` 進行事務性同步，確保資料一致性。
    - **訂單與計分系統**: 開發了 `generateOrder` 函數，可根據預設權重隨機生成不同難度的訂單。同時，`calculateOrderPoints` 函數根據訂單完成速度和料理複雜度計算分數。
    - **食譜邏輯**: 實現了 `canAssembleRecipe` 函數，用於檢查玩家庫存並判斷可組裝的料理。目前食譜（如基本漢堡、起司漢堡、豪華漢堡）為硬編碼實現，為未來資料庫驅動的食譜系統奠定基礎。
    - **遊戲狀態管理**: 遊戲開始後，所有遊戲進程（如計時、分數、訂單、玩家庫存）都集中在 `cook_game_rooms` 表的 `game_state` 欄位中進行管理。

- **前端互動流程 (Frontend Interaction Flow)**:
    - **工作站互動**: 前端 UI (`cook-game.html`) 現已支持與各個工作站（食材站、烹飪站、組裝站、上菜站）的互動，玩家操作會觸發對應的 WebSocket `player_action` 事件。
    - **即時狀態更新**: 前端能接收並處理來自後端的各種狀態更新，如 `order_completed`, `new_order`, `player_list` 等，並即時呈現在介面上。
    - **動態提示系統**: 增強了任務提示功能，能根據玩家當前庫存和訂單需求，提供更精準的操作指引。

- **連線穩定性增強**:
    - **斷線重連機制**: 實作了斷線緩衝機制。玩家短時間內斷線後（10秒內）可重新連線回到遊戲中，不會立刻被踢出房間，提升了在不穩定網路環境下的遊戲體驗。

## 更新日誌

### 2024年3月更新
1. **庫存系統優化**
   - 將玩家庫存槽位從5個增加到8個
   - 新的4x2網格佈局，更適合複雜食譜的製作
   - 特別優化了需要多種預處理食材的豪華漢堡製作流程

2. **手機版面統一化**
   - 重新設計遊戲界面，採用固定寬度的垂直佈局
   - 最大寬度限制在480px，確保在所有設備上保持一致的體驗
   - 優化觸控區域大小，提升操作體驗
   - 改進視覺層級，使用深色主題提升可讀性

### 2024年3月 - UI/UX全面重構

#### 1. 手機優先設計
- **模擬手機視窗**：
  - 遊戲介面現在被包裝在一個模擬手機的容器中（最大寬度450px）
  - 圓角邊框和陰影效果增強了手機應用的視覺感
  - 在桌面版本中置中顯示，確保所有玩家體驗一致

#### 2. 介面佈局優化
- **垂直分區設計**：
  - 頂部：遊戲狀態欄（時間、分數）
  - 中部：訂單列表（可滾動）和主要遊戲區域
  - 底部：8格物品欄（4x2網格佈局）
- **工作站重組**：
  - 改用固定2列網格佈局
  - 更大的點擊區域和清晰的圖示
  - 工作站永久可見，無需滾動

#### 3. 操作流程改進
- **智能槽位選擇**：
  - 實現自動選擇下一個空槽位功能
  - 拾取物品後自動切換到下一個可用槽位
  - 避免了「庫存槽已有物品」的錯誤提示
- **觸控優化**：
  - 更大的互動區域
  - 清晰的視覺反饋
  - 流暢的動畫效果

#### 4. 視覺設計更新
- **深色主題優化**：
  - 使用多層次的深色背景
  - 改進對比度和可讀性
  - 柔和的邊框和陰影效果
- **訂單卡片重設計**：
  - 更緊湊的卡片式設計
  - 清晰的食材圖示
  - 直觀的時間進度條
