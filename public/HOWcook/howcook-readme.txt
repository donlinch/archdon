# HOW料理遊戲設計報告

## 1. 專案概述

「HOW料理」是一款將烹飪過程遊戲化的「食譜程式設計」應用。它捨棄了傳統的步驟式教學，改用更具創造性的「程式碼組合」介面。玩家通過從指令庫中選擇代表「食材」、「操作」、「工具」的指令，將它們堆疊成一個完整的料理程式碼。遊戲具備即時狀態預覽功能，玩家的每一步操作都會立刻反映出食材的變化。最核心的特色是「成品組合」機制，允許玩家將一個處理流程的結果，轉化成下一個流程的新原料，極大提升了料理創作的自由度和深度。

## 2. 核心設計原則

- **本地化優先**：開發以本地存儲和單人遊戲為主，不依賴後端。
- **手機直式優化**：所有UI元素適配垂直手機屏幕，支持單手操作。
- **遊戲化程式碼介面**：採用類似IDE的暗色主題與等寬字體，指令按類型以不同顏色區分，提供沉浸式的程式設計體驗。
- **即時狀態預覽**：玩家在組合指令時，系統會即時顯示食材的狀態變化（如「雞肉」+「切」→「切好的雞肉」），提供最直觀的回饋。
- **成品組合機制**：玩家可以將中間產物（如「切好的雞肉」）打包成一個全新的、可再次使用的食材，實現複雜的多步驟料理。
- **AI輔助分析**：將完成的「料理程式碼」與標準答案進行比對，生成詳細的分析提示詞，以便交由AI進行更深入的點評。

## 3. 技術規格

### 3.1 開發環境
- 前端：HTML5, CSS3, JavaScript (原生)
- AI介面：生成AI提示詞供用戶複製使用
- 目標設備：智能手機 (直式)
- 最小屏幕支持：320px寬度

### 3.2 框架設計
- 響應式佈局：適應不同手機寬度與高度。
- 可滾動內容區域：確保所有選項可見。
- 自適應文字大小：確保在不同設備上可讀性。
- 禁用縮放：`user-scalable=no`

## 4. 界面設計

### 4.1 主界面結構
不同於BBS風格，新版界面主要由三大區塊構成：

1.  **挑戰題目區**
    -   顯示當前料理挑戰的文字描述與小貼士，為玩家設定目標。

2.  **程式碼組合區**
    -   **指令堆疊區 (Code Preview)**：位於左側的暗色背景區塊，用於顯示玩家已選擇的指令。每個「處理組」都會即時顯示其最終狀態，並提供一個「組合」按鈕。
    -   **指令選擇面板 (Code Palette)**：位於右側的互動面板，包含可篩選的指令類別按鈕（全部、組合、食材、操作、工具）和所有可用的指令按鈕。

3.  **結果顯示區**
    -   顯示系統根據玩家提交的程式碼計算出的「相似度評分」，並生成一份詳細的料理流程說明和一份用於AI分析的提示詞。

## 5. 互動設計

### 5.1 基本互動方式
- **指令選擇**：玩家在「指令選擇面板」中點擊圖文並茂的指令按鈕。
- **指令堆疊**：每次點擊都會將對應的指令添加到左側的「指令堆疊區」，形成一個有序的程式碼序列。
- **分類篩選**：玩家可以點擊類別按鈕，快速篩選出特定類型的指令，如「組合」按鈕可單獨列出所有由玩家創造的新食材。

### 5.2 烹飪程式設計流程
1. **接收挑戰**：系統隨機顯示一個料理挑戰，包含描述和提示。
2. **智慧指令過濾**：系統會即時分析當前處理組的狀態，自動禁用不合邏輯的指令。例如，在放入食材前，所有「操作」按鈕都不可點擊，從而預防錯誤，引導玩家進行正確操作。
3. **編寫與組合**：玩家從指令庫中選擇並堆疊指令。當一個處理組完成後（如「大蒜」+「切」→「切好的大蒜」），可以點擊該組下方的「組合」按鈕。
4. **成品再利用**：點擊「組合」後，成品「切好的大蒜」會變成一個全新的食材，並出現在右側「組合」面板中，玩家可以將它拖入新的處理組與其它食材（如「雞肉」）一起繼續烹飪。
5. **執行與評分**：點擊「執行料理」按鈕。系統會將玩家的最終成品與標準答案進行比對，計算出相似度分數，並生成詳細的料理流程文本和AI分析提示詞。
6. **獲取反饋**：玩家可以查看分數和料理流程，並可複製AI提示詞以獲得更深入的點評。

### 5.3 AI評分系統
- **相似度評分**：基於玩家選擇的原始指令與標準答案的匹配度進行加權計分。
    - 食材匹配度 (40%)
    - 操作與調味正確性 (40%)
    - 工具適用性 (20%)
- **邏輯驗證**：已整合進智慧指令過濾系統中，玩家在編寫階段就會被引導，避免了基礎的邏輯錯誤。
- **AI提示詞生成**：自動生成結構化的Prompt，包含挑戰目標、標準答案、玩家的程式碼以及詳細的分析要求，方便用戶與AI進行高效互動。

## 6. 數據設計

### 6.1 挑戰題目數據結構 (`recipeQuestions`)
```javascript
{
  "title": "微波爐荷包蛋",
  "description": "挑戰：製作一道簡單易做且富含蛋白質的菜餚，120秒內即可完成。",
  "ingredients": ["雞蛋", "飲用水"],
  "actions": ["微波", "加鹽", "加芝麻油"], // 調味已整合進 actions
  "tools": ["微波爐", "小碗"],
  "tips": "為避免加熱時蛋黃濺出，可以在碗上加蓋。用筷子在蛋黃上戳幾個洞是關鍵！"
}
```

### 6.2 指令庫數據結構 (`codeLibrary`)
```javascript
// 指令庫以類別劃分，包含所有可選指令。
// 操作指令包含 `requires` 屬性用於智慧過濾，`process` 函數用於狀態轉換。
const codeLibrary = {
    ingredients: [
        { emoji: "🐔", name: "雞肉", type: "ingredient" },
        // ...更多食材
    ],
    actions: [
        { emoji: "🔪", name: "切", type: "action", requires: ["ingredient"], process: (state) => `切好的${state}` },
        { emoji: "🍳", name: "炒", type: "action", requires: ["ingredient", "tool"], process: (state, tool) => `用${tool}炒過的${state}` },
        // ...更多操作
    ],
    tools: [
        { emoji: "🍳", name: "炒鍋", type: "tool" },
        // ...更多工具
    ]
};
```

### 6.3 AI評分Prompt設計
```
請根據以下食譜挑戰和用戶提交的「料理程式碼」，進行詳細比對分析。

【題目要求】
描述：挑戰：製作一道簡單易做且富含蛋白質的菜餚，120秒內即可完成。
提示：為避免加熱時蛋黃濺出，可以在碗上加蓋。用筷子在蛋黃上戳幾個洞是關鍵！

【正確答案參考】
- 食材: 雞蛋、飲用水
- 操作: 微波、加鹽、加芝麻油
- 工具: 微波爐、小碗

【用戶的料理程式碼】
// 這裡會呈現用戶最終組合出的流程
處理組 1:
1. [ingredient] 雞蛋
2. [tool] 小碗
3. [action] 加鹽
➡️ 狀態: 加鹽調味的雞蛋

【比對要求】
1. 分析主要差異點（以表格形式呈現，包含：比對項目、正確答案、用戶選擇、差異說明）
2. 提供具體改進建議（如何調整指令順序或替換指令能更接近正確答案）
3. 根據用戶的指令組合，預測最終成品的味道和口感，並給出創意點評。
4. 如果組合非常奇特，請以鼓勵的語氣提出創新料理的可能性。
5. 最後總結評語（簡短有力的結論）。
```

## 7. 功能模塊

### 7.1 核心玩法
- **隨機挑戰**：每次打開或點擊「換一題」按鈕時，系統會隨機提供一個新的料理挑戰。
- **程式碼組合**：玩家可以自由地從指令庫中選擇指令，堆疊出自己的料理流程。
- **自動評分與分析**：系統根據內置規則進行評分，並生成結果。

## 8. 實現路線圖

### 8.1 第一階段：核心功能（已完成）
- [x] 基礎UI框架（程式碼組合介面）
- [x] 料理數據庫（`recipeQuestions` 和 `codeLibrary`）
- [x] 指令堆疊與篩選系統
- [x] 基礎評分系統（本地規則）
- [x] AI提示詞生成功能
- [x] 即時狀態轉換預覽
- [x] 成品轉食材（組合）機制
- [x] 智慧指令過濾系統

### 8.2 第二階段：功能深化
- [x] 擴充更多料理挑戰與指令 (部分完成)
- [ ] 本地存儲用戶進度與最佳分數
- [ ] 優化指令的依賴關係驗證邏輯
- [ ] 增加更複雜的指令，如循環（翻炒3次）、條件（如果是魚，則改為蒸）
- [ ] 新增「學習模式」，提供更多提示與引導

### 8.3 第三階段：內容擴展與社區功能
- [ ] 引入二星及以上難度的料理
- [ ] 設計特殊挑戰任務與成就系統
- [ ] 允許用戶分享自己的「料理程式碼」或AI評分結果
- [ ] 探索自定義食譜與挑戰的可能性
